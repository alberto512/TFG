// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Account struct {
	ID           string         `json:"id"`
	Iban         string         `json:"iban"`
	Name         string         `json:"name"`
	Currency     string         `json:"currency"`
	Amount       float64        `json:"amount"`
	Bank         string         `json:"Bank"`
	User         *User          `json:"user"`
	Transactions []*Transaction `json:"transactions"`
}

type Transaction struct {
	ID          string   `json:"id"`
	Description string   `json:"description"`
	Date        int      `json:"date"`
	Amount      float64  `json:"amount"`
	Category    string   `json:"category"`
	User        *User    `json:"user"`
	Account     *Account `json:"account"`
}

type User struct {
	ID           string         `json:"id"`
	Username     string         `json:"username"`
	Password     string         `json:"password"`
	Role         Role           `json:"role"`
	Accounts     []*Account     `json:"accounts"`
	Transactions []*Transaction `json:"transactions"`
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
